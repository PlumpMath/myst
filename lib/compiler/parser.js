/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"literal":3,"STRING":4,"NUMBER":5,"TRUE":6,"FALSE":7,"identifier":8,"IDENTIFIER":9,"placeholder":10,"_":11,"program":12,"declarations":13,"EOF":14,"declaration":15,";":16,"=":17,"expression":18,"argument":19,"prim_expression":20,"argument_list":21,"match":22,"match_list":23,"optional_match_list":24,"function_body":25,"do_body_item":26,"member":27,"<-":28,"do_body":29,".":30,"::":31,"obj_property":32,":":33,"obj_properties":34,",":35,"obj_literal":36,"{":37,"}":38,"array_items":39,"array_literal":40,"[":41,"]":42,"(":43,")":44,"FUNCTION":45,"DO":46,"!":47,"+":48,"-":49,"*":50,"/":51,"%":52,"==":53,"!=":54,"<":55,">":56,"<=":57,">=":58,"||":59,"&&":60,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STRING",5:"NUMBER",6:"TRUE",7:"FALSE",9:"IDENTIFIER",11:"_",14:"EOF",16:";",17:"=",28:"<-",30:".",31:"::",33:":",35:",",37:"{",38:"}",41:"[",42:"]",43:"(",44:")",45:"FUNCTION",46:"DO",47:"!",48:"+",49:"-",50:"*",51:"/",52:"%",53:"==",54:"!=",55:"<",56:">",57:"<=",58:">=",59:"||",60:"&&"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[8,1],[10,1],[12,2],[13,0],[13,3],[15,3],[19,1],[19,1],[21,1],[21,2],[22,1],[22,1],[23,1],[23,2],[24,0],[24,1],[25,2],[26,3],[26,1],[26,1],[29,0],[29,3],[27,3],[27,3],[27,1],[32,3],[32,3],[34,1],[34,3],[36,3],[39,1],[39,3],[40,3],[20,1],[20,3],[20,1],[20,1],[20,1],[20,5],[20,5],[20,2],[18,1],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = {type: 'Literal', value: eval($$[$0])}; 
break;
case 2: this.$ = {type: 'Literal', value: eval($$[$0])}; 
break;
case 3: this.$ = {type: 'Literal', valueType: 'BOOLEAN', value: true}; 
break;
case 4: this.$ = {type: 'Literal', valueType: 'BOOLEAN', value: false}; 
break;
case 5: this.$ = {type: 'Identifier', name: $$[$0]}; 
break;
case 6: this.$ = {type: 'Placeholder'}; 
break;
case 7: return {type: 'Program', declarations: $$[$0-1]}; 
break;
case 8: this.$ = []; 
break;
case 9: this.$ = $$[$0-2].slice(); this.$.push($$[$0-1]); 
break;
case 10: this.$ = {type: 'Declaration', name: $$[$0-2], value: $$[$0]}; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = [$$[$0]]; 
break;
case 14: this.$ = $$[$0-1].slice(); this.$.push($$[$0]); 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = [$$[$0]]; 
break;
case 18: this.$ = $$[$0-1].slice(); this.$.push($$[$0]); 
break;
case 19: this.$ = []; 
break;
case 21: this.$ = {type: 'FunctionBody', returns: $$[$0], declarations: $$[$0-1]}; 
break;
case 22: this.$ = {type: 'Bind', target: $$[$0-2], value: $$[$0]}; 
break;
case 23: this.$ = {type: 'Action', value: $$[$0]}; 
break;
case 24: this.$ = $$[$0]; 
break;
case 25: this.$ = []; 
break;
case 26: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 27: this.$ = {type: 'Member', object: $$[$0-2], property: $$[$0]}; 
break;
case 28: this.$ = {type: 'Member', object: $$[$0-2], property: $$[$0]}; 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = {type: 'Property', key: $$[$0-2], value: $$[$0]}; 
break;
case 31: this.$ = {type: 'Property', key: $$[$0-2], value: $$[$0]}; 
break;
case 32: this.$ = [$$[$0]]; 
break;
case 33: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 34: this.$ = {type: 'Object', properties: $$[$0-1]}; 
break;
case 35: this.$ = [$$[$0]]; 
break;
case 36: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 37: this.$ = {type: 'Array', elements: $$[$0-1]}; 
break;
case 38: this.$ = $$[$0]; 
break;
case 39: this.$ = $$[$0-1]; 
break;
case 40: this.$ = $$[$0]; 
break;
case 41: this.$ = $$[$0]; 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = {type: 'Function', params: $$[$0-3], body: $$[$0-1]}; 
break;
case 44: this.$ = {type: 'Do', params: $$[$0-3], body: $$[$0-1]}; 
break;
case 45: this.$ = {type: 'UnaryOperator', arguments: [$$[$0]], op: $$[$0-1]}; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = {type: 'Invocation', callee: $$[$0-1], arguments: $$[$0]}; 
break;
case 48: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 49: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 50: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 51: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 52: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 53: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 54: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 55: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 56: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 57: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 58: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 59: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 60: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 61: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
}
},
table: [{9:[2,8],12:1,13:2,14:[2,8]},{1:[3]},{9:[1,5],14:[1,3],15:4},{1:[2,7]},{16:[1,6]},{17:[1,7]},{4:[2,9],5:[2,9],6:[2,9],7:[2,9],9:[2,9],14:[2,9],37:[2,9],41:[2,9],43:[2,9],45:[2,9],46:[2,9],47:[2,9]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:8,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{16:[2,10],33:[1,39],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],10:43,11:[1,44],16:[2,46],19:41,20:42,21:40,27:12,33:[2,46],35:[2,46],36:13,37:[1,23],38:[2,46],40:14,41:[1,24],42:[2,46],43:[1,11],44:[2,46],45:[1,15],46:[1,16],47:[1,17],48:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46]},{4:[2,38],5:[2,38],6:[2,38],7:[2,38],9:[2,38],11:[2,38],16:[2,38],33:[2,38],35:[2,38],37:[2,38],38:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],48:[2,38],49:[2,38],50:[2,38],51:[2,38],52:[2,38],53:[2,38],54:[2,38],55:[2,38],56:[2,38],57:[2,38],58:[2,38],59:[2,38],60:[2,38]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:45,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{4:[2,40],5:[2,40],6:[2,40],7:[2,40],9:[2,40],11:[2,40],16:[2,40],30:[1,46],31:[1,47],33:[2,40],35:[2,40],37:[2,40],38:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[2,40],53:[2,40],54:[2,40],55:[2,40],56:[2,40],57:[2,40],58:[2,40],59:[2,40],60:[2,40]},{4:[2,41],5:[2,41],6:[2,41],7:[2,41],9:[2,41],11:[2,41],16:[2,41],33:[2,41],35:[2,41],37:[2,41],38:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[2,41],55:[2,41],56:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41]},{4:[2,42],5:[2,42],6:[2,42],7:[2,42],9:[2,42],11:[2,42],16:[2,42],33:[2,42],35:[2,42],37:[2,42],38:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42],55:[2,42],56:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42]},{8:50,9:[1,25],10:51,11:[1,44],22:49,23:48},{8:50,9:[1,25],10:51,11:[1,44],22:49,23:53,24:52,37:[2,19]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],20:54,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{4:[2,1],5:[2,1],6:[2,1],7:[2,1],9:[2,1],11:[2,1],16:[2,1],33:[2,1],35:[2,1],37:[2,1],38:[2,1],41:[2,1],42:[2,1],43:[2,1],44:[2,1],45:[2,1],46:[2,1],47:[2,1],48:[2,1],49:[2,1],50:[2,1],51:[2,1],52:[2,1],53:[2,1],54:[2,1],55:[2,1],56:[2,1],57:[2,1],58:[2,1],59:[2,1],60:[2,1]},{4:[2,2],5:[2,2],6:[2,2],7:[2,2],9:[2,2],11:[2,2],16:[2,2],33:[2,2],35:[2,2],37:[2,2],38:[2,2],41:[2,2],42:[2,2],43:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],48:[2,2],49:[2,2],50:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2],55:[2,2],56:[2,2],57:[2,2],58:[2,2],59:[2,2],60:[2,2]},{4:[2,3],5:[2,3],6:[2,3],7:[2,3],9:[2,3],11:[2,3],16:[2,3],33:[2,3],35:[2,3],37:[2,3],38:[2,3],41:[2,3],42:[2,3],43:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],48:[2,3],49:[2,3],50:[2,3],51:[2,3],52:[2,3],53:[2,3],54:[2,3],55:[2,3],56:[2,3],57:[2,3],58:[2,3],59:[2,3],60:[2,3]},{4:[2,4],5:[2,4],6:[2,4],7:[2,4],9:[2,4],11:[2,4],16:[2,4],33:[2,4],35:[2,4],37:[2,4],38:[2,4],41:[2,4],42:[2,4],43:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4],49:[2,4],50:[2,4],51:[2,4],52:[2,4],53:[2,4],54:[2,4],55:[2,4],56:[2,4],57:[2,4],58:[2,4],59:[2,4],60:[2,4]},{4:[2,29],5:[2,29],6:[2,29],7:[2,29],9:[2,29],11:[2,29],16:[2,29],28:[2,29],30:[2,29],31:[2,29],33:[2,29],35:[2,29],37:[2,29],38:[2,29],41:[2,29],42:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],55:[2,29],56:[2,29],57:[2,29],58:[2,29],59:[2,29],60:[2,29]},{3:58,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:57,9:[1,25],32:56,34:55},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:60,20:9,27:12,36:13,37:[1,23],39:59,40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{4:[2,5],5:[2,5],6:[2,5],7:[2,5],9:[2,5],11:[2,5],16:[2,5],28:[2,5],30:[2,5],31:[2,5],33:[2,5],35:[2,5],37:[2,5],38:[2,5],41:[2,5],42:[2,5],43:[2,5],44:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],56:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:61,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:62,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:63,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:64,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:65,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:66,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:67,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:68,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:69,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:70,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:71,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:72,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:73,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:74,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],10:43,11:[1,44],16:[2,47],19:75,20:42,27:12,33:[2,47],35:[2,47],36:13,37:[1,23],38:[2,47],40:14,41:[1,24],42:[2,47],43:[1,11],44:[2,47],45:[1,15],46:[1,16],47:[1,17],48:[2,47],49:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47]},{4:[2,13],5:[2,13],6:[2,13],7:[2,13],9:[2,13],11:[2,13],16:[2,13],33:[2,13],35:[2,13],37:[2,13],38:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13]},{4:[2,11],5:[2,11],6:[2,11],7:[2,11],9:[2,11],11:[2,11],16:[2,11],33:[2,11],35:[2,11],37:[2,11],38:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],49:[2,11],50:[2,11],51:[2,11],52:[2,11],53:[2,11],54:[2,11],55:[2,11],56:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11]},{4:[2,12],5:[2,12],6:[2,12],7:[2,12],9:[2,12],11:[2,12],16:[2,12],33:[2,12],35:[2,12],37:[2,12],38:[2,12],41:[2,12],42:[2,12],43:[2,12],44:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12]},{4:[2,6],5:[2,6],6:[2,6],7:[2,6],9:[2,6],11:[2,6],16:[2,6],33:[2,6],35:[2,6],37:[2,6],38:[2,6],41:[2,6],42:[2,6],43:[2,6],44:[2,6],45:[2,6],46:[2,6],47:[2,6],48:[2,6],49:[2,6],50:[2,6],51:[2,6],52:[2,6],53:[2,6],54:[2,6],55:[2,6],56:[2,6],57:[2,6],58:[2,6],59:[2,6],60:[2,6]},{33:[1,39],44:[1,76],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{8:77,9:[1,25]},{8:78,9:[1,25]},{8:50,9:[1,25],10:51,11:[1,44],22:80,37:[1,79]},{9:[2,17],11:[2,17],37:[2,17]},{9:[2,15],11:[2,15],37:[2,15]},{9:[2,16],11:[2,16],37:[2,16]},{37:[1,81]},{8:50,9:[1,25],10:51,11:[1,44],22:80,37:[2,20]},{4:[2,45],5:[2,45],6:[2,45],7:[2,45],9:[2,45],11:[2,45],16:[2,45],33:[2,45],35:[2,45],37:[2,45],38:[2,45],41:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45],52:[2,45],53:[2,45],54:[2,45],55:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45]},{35:[1,83],38:[1,82]},{35:[2,32],38:[2,32]},{33:[1,84]},{33:[1,85]},{35:[1,87],42:[1,86]},{33:[1,39],35:[2,35],42:[2,35],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{16:[2,48],33:[2,48],35:[2,48],38:[2,48],42:[2,48],44:[2,48],48:[2,48],49:[2,48],50:[1,28],51:[1,29],52:[1,30],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48]},{16:[2,49],33:[2,49],35:[2,49],38:[2,49],42:[2,49],44:[2,49],48:[2,49],49:[2,49],50:[1,28],51:[1,29],52:[1,30],53:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49]},{16:[2,50],33:[2,50],35:[2,50],38:[2,50],42:[2,50],44:[2,50],48:[2,50],49:[2,50],50:[2,50],51:[2,50],52:[2,50],53:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50]},{16:[2,51],33:[2,51],35:[2,51],38:[2,51],42:[2,51],44:[2,51],48:[2,51],49:[2,51],50:[2,51],51:[2,51],52:[2,51],53:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51]},{16:[2,52],33:[2,52],35:[2,52],38:[2,52],42:[2,52],44:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52]},{16:[2,53],33:[1,39],35:[2,53],38:[2,53],42:[2,53],44:[2,53],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],59:[2,53],60:[2,53]},{16:[2,54],33:[1,39],35:[2,54],38:[2,54],42:[2,54],44:[2,54],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],59:[2,54],60:[2,54]},{16:[2,55],33:[1,39],35:[2,55],38:[2,55],42:[2,55],44:[2,55],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],59:[2,55],60:[2,55]},{16:[2,56],33:[1,39],35:[2,56],38:[2,56],42:[2,56],44:[2,56],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],59:[2,56],60:[2,56]},{16:[2,57],33:[1,39],35:[2,57],38:[2,57],42:[2,57],44:[2,57],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],59:[2,57],60:[2,57]},{16:[2,58],33:[1,39],35:[2,58],38:[2,58],42:[2,58],44:[2,58],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],59:[2,58],60:[2,58]},{16:[2,59],33:[1,39],35:[2,59],38:[2,59],42:[2,59],44:[2,59],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{16:[2,60],33:[1,39],35:[2,60],38:[2,60],42:[2,60],44:[2,60],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[2,60],60:[1,38]},{16:[2,61],33:[1,39],35:[2,61],38:[2,61],42:[2,61],44:[2,61],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61]},{4:[2,14],5:[2,14],6:[2,14],7:[2,14],9:[2,14],11:[2,14],16:[2,14],33:[2,14],35:[2,14],37:[2,14],38:[2,14],41:[2,14],42:[2,14],43:[2,14],44:[2,14],45:[2,14],46:[2,14],47:[2,14],48:[2,14],49:[2,14],50:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14]},{4:[2,39],5:[2,39],6:[2,39],7:[2,39],9:[2,39],11:[2,39],16:[2,39],33:[2,39],35:[2,39],37:[2,39],38:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],51:[2,39],52:[2,39],53:[2,39],54:[2,39],55:[2,39],56:[2,39],57:[2,39],58:[2,39],59:[2,39],60:[2,39]},{4:[2,27],5:[2,27],6:[2,27],7:[2,27],9:[2,27],11:[2,27],16:[2,27],28:[2,27],30:[2,27],31:[2,27],33:[2,27],35:[2,27],37:[2,27],38:[2,27],41:[2,27],42:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27],49:[2,27],50:[2,27],51:[2,27],52:[2,27],53:[2,27],54:[2,27],55:[2,27],56:[2,27],57:[2,27],58:[2,27],59:[2,27],60:[2,27]},{4:[2,28],5:[2,28],6:[2,28],7:[2,28],9:[2,28],11:[2,28],16:[2,28],28:[2,28],30:[2,28],31:[2,28],33:[2,28],35:[2,28],37:[2,28],38:[2,28],41:[2,28],42:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28],49:[2,28],50:[2,28],51:[2,28],52:[2,28],53:[2,28],54:[2,28],55:[2,28],56:[2,28],57:[2,28],58:[2,28],59:[2,28],60:[2,28]},{4:[2,8],5:[2,8],6:[2,8],7:[2,8],9:[2,8],13:89,25:88,37:[2,8],41:[2,8],43:[2,8],45:[2,8],46:[2,8],47:[2,8]},{9:[2,18],11:[2,18],37:[2,18]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,95],15:94,18:93,20:9,26:91,27:92,29:90,36:13,37:[1,23],38:[2,25],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{4:[2,34],5:[2,34],6:[2,34],7:[2,34],9:[2,34],11:[2,34],16:[2,34],33:[2,34],35:[2,34],37:[2,34],38:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],55:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34]},{3:58,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:57,9:[1,25],32:96},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:97,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:98,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{4:[2,37],5:[2,37],6:[2,37],7:[2,37],9:[2,37],11:[2,37],16:[2,37],33:[2,37],35:[2,37],37:[2,37],38:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[2,37],51:[2,37],52:[2,37],53:[2,37],54:[2,37],55:[2,37],56:[2,37],57:[2,37],58:[2,37],59:[2,37],60:[2,37]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:99,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{38:[1,100]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,95],15:4,18:101,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{38:[1,102]},{16:[1,103]},{4:[2,40],5:[2,40],6:[2,40],7:[2,40],9:[2,40],11:[2,40],16:[2,40],28:[1,104],30:[1,46],31:[1,47],33:[2,40],37:[2,40],41:[2,40],43:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[2,40],53:[2,40],54:[2,40],55:[2,40],56:[2,40],57:[2,40],58:[2,40],59:[2,40],60:[2,40]},{16:[2,23],33:[1,39],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{16:[2,24]},{4:[2,5],5:[2,5],6:[2,5],7:[2,5],9:[2,5],11:[2,5],16:[2,5],17:[1,7],28:[2,5],30:[2,5],31:[2,5],33:[2,5],37:[2,5],38:[2,5],41:[2,5],43:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],56:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5]},{35:[2,33],38:[2,33]},{33:[1,39],35:[2,30],38:[2,30],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{33:[1,39],35:[2,31],38:[2,31],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{33:[1,39],35:[2,36],42:[2,36],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{4:[2,43],5:[2,43],6:[2,43],7:[2,43],9:[2,43],11:[2,43],16:[2,43],33:[2,43],35:[2,43],37:[2,43],38:[2,43],41:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[2,43],55:[2,43],56:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[2,43]},{33:[1,39],38:[2,21],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]},{4:[2,44],5:[2,44],6:[2,44],7:[2,44],9:[2,44],11:[2,44],16:[2,44],33:[2,44],35:[2,44],37:[2,44],38:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],51:[2,44],52:[2,44],53:[2,44],54:[2,44],55:[2,44],56:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[2,44]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,95],15:94,18:93,20:9,26:91,27:92,29:105,36:13,37:[1,23],38:[2,25],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{3:10,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:22,9:[1,25],18:106,20:9,27:12,36:13,37:[1,23],40:14,41:[1,24],43:[1,11],45:[1,15],46:[1,16],47:[1,17]},{38:[2,26]},{16:[2,22],33:[1,39],48:[1,26],49:[1,27],50:[1,28],51:[1,29],52:[1,30],53:[1,31],54:[1,32],55:[1,33],56:[1,34],57:[1,35],58:[1,36],59:[1,37],60:[1,38]}],
defaultActions: {3:[2,7],94:[2,24],105:[2,26]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore single-line comments */
break;
case 1:/* Ignore multi-line comments */
break;
case 2:/* Ignore Whitespace */
break;
case 3:return 45;
break;
case 4:return 46;
break;
case 5:return 'IN';
break;
case 6:return 'WHERE';
break;
case 7:return 'MODULE';
break;
case 8:return 6;
break;
case 9:return 7;
break;
case 10:return 37;
break;
case 11:return 38;
break;
case 12:return 41;
break;
case 13:return 42;
break;
case 14:return 43;
break;
case 15:return 44;
break;
case 16:return 31;
break;
case 17:return 28;
break;
case 18:return 33;
break;
case 19:return 48;
break;
case 20:return 49;
break;
case 21:return 50;
break;
case 22:return 51;
break;
case 23:return 52;
break;
case 24:return 53;
break;
case 25:return 54;
break;
case 26:return 57;
break;
case 27:return 58;
break;
case 28:return 55;
break;
case 29:return 56;
break;
case 30:return 59;
break;
case 31:return 60;
break;
case 32:return 47;
break;
case 33:return 17;
break;
case 34:return 35;
break;
case 35:return 30;
break;
case 36:return 16;
break;
case 37:return 11;
break;
case 38:return 4;
break;
case 39:return 4;
break;
case 40:return 5;
break;
case 41:return 9;
break;
case 42:return 14;
break;
}
},
rules: [/^(?:\/\/[^\n]*\\n)/,/^(?:\/\*([^*]|\*[^/])\*\/)/,/^(?:\s+)/,/^(?:fn\b)/,/^(?:do\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:module\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:::)/,/^(?:<-)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:_\b)/,/^(?:"(\\"|[^"])*")/,/^(?:'(\\'|[^'])*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}