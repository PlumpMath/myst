/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"declarations":4,"EOF":5,"imports":6,"import":7,";":8,"FROM":9,"STRING":10,"IMPORT":11,"import_names":12,"AS":13,"identifier":14,",":15,"literal":16,"NUMBER":17,"TRUE":18,"FALSE":19,"IDENTIFIER":20,"placeholder":21,"_":22,"declaration":23,"=":24,"expression":25,"argument":26,"prim_expression":27,"argument_list":28,"match":29,"match_list":30,"optional_match_list":31,"function_body":32,"do_body_item":33,"member":34,"<-":35,"do_body":36,".":37,"::":38,"obj_property":39,":":40,"obj_properties":41,"obj_literal":42,"{":43,"}":44,"array_items":45,"array_literal":46,"[":47,"]":48,"(":49,")":50,"FUNCTION":51,"DO":52,"!":53,"-":54,"+":55,"*":56,"/":57,"%":58,"==":59,"!=":60,"<":61,">":62,"<=":63,">=":64,"||":65,"&&":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",9:"FROM",10:"STRING",11:"IMPORT",13:"AS",15:",",17:"NUMBER",18:"TRUE",19:"FALSE",20:"IDENTIFIER",22:"_",24:"=",35:"<-",37:".",38:"::",40:":",43:"{",44:"}",47:"[",48:"]",49:"(",50:")",51:"FUNCTION",52:"DO",53:"!",54:"-",55:"+",56:"*",57:"/",58:"%",59:"==",60:"!=",61:"<",62:">",63:"<=",64:">=",65:"||",66:"&&"},
productions_: [0,[3,2],[6,2],[6,3],[7,4],[7,6],[7,4],[12,1],[12,3],[16,1],[16,1],[16,1],[16,1],[14,1],[21,1],[4,0],[4,3],[23,3],[26,1],[26,1],[28,1],[28,2],[29,1],[29,1],[30,1],[30,2],[31,0],[31,1],[32,2],[33,3],[33,1],[33,1],[36,0],[36,3],[34,3],[34,3],[34,1],[39,3],[39,3],[41,1],[41,3],[42,3],[45,1],[45,3],[46,3],[27,1],[27,3],[27,1],[27,1],[27,1],[27,5],[27,5],[27,2],[27,2],[25,1],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'Program', declarations: $$[$0-1]}; 
break;
case 2: this.$ = [$$[$0-1]]; 
break;
case 3: this.$ = $$[$0-2].slice(); this.$.push($$[$0-1]); 
break;
case 4: this.$ = {type: 'Import', names: $$[$0], target: $$[$0-2], as: null}; 
break;
case 5: this.$ = {type: 'Import', names: $$[$0-2], target: $$[$0-4], as: $$[$0]}; 
break;
case 6: this.$ = {type: 'Import', names: [], target: $$[$0-2], as: $$[$0]}; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 8: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 9: this.$ = {type: 'Literal', value: eval($$[$0])}; 
break;
case 10: this.$ = {type: 'Literal', value: eval($$[$0])}; 
break;
case 11: this.$ = {type: 'Literal', valueType: 'BOOLEAN', value: true}; 
break;
case 12: this.$ = {type: 'Literal', valueType: 'BOOLEAN', value: false}; 
break;
case 13: this.$ = {type: 'Identifier', name: $$[$0]}; 
break;
case 14: this.$ = {type: 'Placeholder'}; 
break;
case 15: this.$ = []; 
break;
case 16: this.$ = $$[$0-2].slice(); this.$.push($$[$0-1]); 
break;
case 17: this.$ = {type: 'Declaration', name: $$[$0-2], value: $$[$0]}; 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = [$$[$0]]; 
break;
case 21: this.$ = $$[$0-1].slice(); this.$.push($$[$0]); 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = [$$[$0]]; 
break;
case 25: this.$ = $$[$0-1].slice(); this.$.push($$[$0]); 
break;
case 26: this.$ = []; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = {type: 'FunctionBody', returns: $$[$0], declarations: $$[$0-1]}; 
break;
case 29: this.$ = {type: 'Bind', target: $$[$0-2], value: $$[$0]}; 
break;
case 30: this.$ = {type: 'Action', value: $$[$0]}; 
break;
case 31: this.$ = $$[$0]; 
break;
case 32: this.$ = []; 
break;
case 33: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 34: this.$ = {type: 'Member', object: $$[$0-2], property: $$[$0], op: $$[$0-1]}; 
break;
case 35: this.$ = {type: 'Member', object: $$[$0-2], property: $$[$0], op: $$[$0-1]}; 
break;
case 36: this.$ = $$[$0]; 
break;
case 37: this.$ = {type: 'Property', key: $$[$0-2], value: $$[$0]}; 
break;
case 38: this.$ = {type: 'Property', key: $$[$0-2], value: $$[$0]}; 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 40: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 41: this.$ = {type: 'Object', properties: $$[$0-1]}; 
break;
case 42: this.$ = [$$[$0]]; 
break;
case 43: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 44: this.$ = {type: 'Array', elements: $$[$0-1]}; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = $$[$0-1]; 
break;
case 47: this.$ = $$[$0]; 
break;
case 48: this.$ = $$[$0]; 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = {type: 'Function', params: $$[$0-3], body: $$[$0-1]}; 
break;
case 51: this.$ = {type: 'Do', params: $$[$0-3], body: $$[$0-1]}; 
break;
case 52: this.$ = {type: 'UnaryOperator', argument: $$[$0], op: $$[$0-1]}; 
break;
case 53: this.$ = {type: 'UnaryOperator', argument: $$[$0], op: $$[$0-1]}; 
break;
case 54: this.$ = $$[$0]; 
break;
case 55: this.$ = {type: 'Invocation', callee: $$[$0-1], arguments: $$[$0]}; 
break;
case 56: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 57: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 58: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 59: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 60: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 61: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 62: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 63: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 64: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 65: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 66: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 67: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 68: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 69: this.$ = {type: 'BinaryOperator', op: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
}
},
table: [{3:1,4:2,5:[2,15],20:[2,15]},{1:[3]},{5:[1,3],20:[1,5],23:4},{1:[2,1]},{8:[1,6]},{24:[1,7]},{5:[2,16],10:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],43:[2,16],47:[2,16],49:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:8,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{8:[2,17],40:[1,40],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{8:[2,54],10:[1,19],14:23,15:[2,54],16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],21:44,22:[1,45],26:42,27:43,28:41,34:12,40:[2,54],42:13,43:[1,24],44:[2,54],46:14,47:[1,25],48:[2,54],49:[1,11],50:[2,54],51:[1,15],52:[1,16],53:[1,17],54:[1,18],55:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54]},{8:[2,45],10:[2,45],15:[2,45],17:[2,45],18:[2,45],19:[2,45],20:[2,45],22:[2,45],40:[2,45],43:[2,45],44:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45],52:[2,45],53:[2,45],54:[2,45],55:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45],65:[2,45],66:[2,45]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:46,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{8:[2,47],10:[2,47],15:[2,47],17:[2,47],18:[2,47],19:[2,47],20:[2,47],22:[2,47],37:[1,47],38:[1,48],40:[2,47],43:[2,47],44:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47]},{8:[2,48],10:[2,48],15:[2,48],17:[2,48],18:[2,48],19:[2,48],20:[2,48],22:[2,48],40:[2,48],43:[2,48],44:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48]},{8:[2,49],10:[2,49],15:[2,49],17:[2,49],18:[2,49],19:[2,49],20:[2,49],22:[2,49],40:[2,49],43:[2,49],44:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],51:[2,49],52:[2,49],53:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49],65:[2,49],66:[2,49]},{14:51,20:[1,26],21:52,22:[1,45],29:50,30:49},{14:51,20:[1,26],21:52,22:[1,45],29:50,30:54,31:53,43:[2,26]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],27:55,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],27:56,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{8:[2,9],10:[2,9],15:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],22:[2,9],40:[2,9],43:[2,9],44:[2,9],47:[2,9],48:[2,9],49:[2,9],50:[2,9],51:[2,9],52:[2,9],53:[2,9],54:[2,9],55:[2,9],56:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],64:[2,9],65:[2,9],66:[2,9]},{8:[2,10],10:[2,10],15:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],22:[2,10],40:[2,10],43:[2,10],44:[2,10],47:[2,10],48:[2,10],49:[2,10],50:[2,10],51:[2,10],52:[2,10],53:[2,10],54:[2,10],55:[2,10],56:[2,10],57:[2,10],58:[2,10],59:[2,10],60:[2,10],61:[2,10],62:[2,10],63:[2,10],64:[2,10],65:[2,10],66:[2,10]},{8:[2,11],10:[2,11],15:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],22:[2,11],40:[2,11],43:[2,11],44:[2,11],47:[2,11],48:[2,11],49:[2,11],50:[2,11],51:[2,11],52:[2,11],53:[2,11],54:[2,11],55:[2,11],56:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11],63:[2,11],64:[2,11],65:[2,11],66:[2,11]},{8:[2,12],10:[2,12],15:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],22:[2,12],40:[2,12],43:[2,12],44:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],64:[2,12],65:[2,12],66:[2,12]},{8:[2,36],10:[2,36],15:[2,36],17:[2,36],18:[2,36],19:[2,36],20:[2,36],22:[2,36],35:[2,36],37:[2,36],38:[2,36],40:[2,36],43:[2,36],44:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],55:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],65:[2,36],66:[2,36]},{10:[1,19],14:59,16:60,17:[1,20],18:[1,21],19:[1,22],20:[1,26],39:58,41:57},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:62,27:9,34:12,42:13,43:[1,24],45:61,46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{8:[2,13],10:[2,13],15:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],22:[2,13],35:[2,13],37:[2,13],38:[2,13],40:[2,13],43:[2,13],44:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:63,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:64,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:65,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:66,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:67,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:68,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:69,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:70,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:71,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:72,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:73,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:74,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:75,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:76,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{8:[2,55],10:[1,19],14:23,15:[2,55],16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],21:44,22:[1,45],26:77,27:43,34:12,40:[2,55],42:13,43:[1,24],44:[2,55],46:14,47:[1,25],48:[2,55],49:[1,11],50:[2,55],51:[1,15],52:[1,16],53:[1,17],54:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55]},{8:[2,20],10:[2,20],15:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],22:[2,20],40:[2,20],43:[2,20],44:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],52:[2,20],53:[2,20],54:[2,20],55:[2,20],56:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20],63:[2,20],64:[2,20],65:[2,20],66:[2,20]},{8:[2,18],10:[2,18],15:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],22:[2,18],40:[2,18],43:[2,18],44:[2,18],47:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],53:[2,18],54:[2,18],55:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],64:[2,18],65:[2,18],66:[2,18]},{8:[2,19],10:[2,19],15:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],22:[2,19],40:[2,19],43:[2,19],44:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19],55:[2,19],56:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],64:[2,19],65:[2,19],66:[2,19]},{8:[2,14],10:[2,14],15:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],22:[2,14],40:[2,14],43:[2,14],44:[2,14],47:[2,14],48:[2,14],49:[2,14],50:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],65:[2,14],66:[2,14]},{40:[1,40],50:[1,78],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{14:79,20:[1,26]},{14:80,20:[1,26]},{14:51,20:[1,26],21:52,22:[1,45],29:82,43:[1,81]},{20:[2,24],22:[2,24],43:[2,24]},{20:[2,22],22:[2,22],43:[2,22]},{20:[2,23],22:[2,23],43:[2,23]},{43:[1,83]},{14:51,20:[1,26],21:52,22:[1,45],29:82,43:[2,27]},{8:[2,52],10:[2,52],15:[2,52],17:[2,52],18:[2,52],19:[2,52],20:[2,52],22:[2,52],40:[2,52],43:[2,52],44:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],65:[2,52],66:[2,52]},{8:[2,53],10:[2,53],15:[2,53],17:[2,53],18:[2,53],19:[2,53],20:[2,53],22:[2,53],40:[2,53],43:[2,53],44:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],52:[2,53],53:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53]},{15:[1,85],44:[1,84]},{15:[2,39],44:[2,39]},{40:[1,86]},{40:[1,87]},{15:[1,89],48:[1,88]},{15:[2,42],40:[1,40],48:[2,42],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{8:[2,56],15:[2,56],40:[2,56],44:[2,56],48:[2,56],50:[2,56],54:[2,56],55:[2,56],56:[1,29],57:[1,30],58:[1,31],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56]},{8:[2,57],15:[2,57],40:[2,57],44:[2,57],48:[2,57],50:[2,57],54:[2,57],55:[2,57],56:[1,29],57:[1,30],58:[1,31],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57]},{8:[2,58],15:[2,58],40:[2,58],44:[2,58],48:[2,58],50:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58]},{8:[2,59],15:[2,59],40:[2,59],44:[2,59],48:[2,59],50:[2,59],54:[2,59],55:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59]},{8:[2,60],15:[2,60],40:[2,60],44:[2,60],48:[2,60],50:[2,60],54:[2,60],55:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60]},{8:[2,61],15:[2,61],40:[1,40],44:[2,61],48:[2,61],50:[2,61],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],65:[2,61],66:[2,61]},{8:[2,62],15:[2,62],40:[1,40],44:[2,62],48:[2,62],50:[2,62],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],65:[2,62],66:[2,62]},{8:[2,63],15:[2,63],40:[1,40],44:[2,63],48:[2,63],50:[2,63],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],65:[2,63],66:[2,63]},{8:[2,64],15:[2,64],40:[1,40],44:[2,64],48:[2,64],50:[2,64],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],65:[2,64],66:[2,64]},{8:[2,65],15:[2,65],40:[1,40],44:[2,65],48:[2,65],50:[2,65],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],65:[2,65],66:[2,65]},{8:[2,66],15:[2,66],40:[1,40],44:[2,66],48:[2,66],50:[2,66],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],65:[2,66],66:[2,66]},{8:[2,67],15:[2,67],40:[1,40],44:[2,67],48:[2,67],50:[2,67],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{8:[2,68],15:[2,68],40:[1,40],44:[2,68],48:[2,68],50:[2,68],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[2,68],66:[1,39]},{8:[2,69],15:[2,69],40:[1,40],44:[2,69],48:[2,69],50:[2,69],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69]},{8:[2,21],10:[2,21],15:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],22:[2,21],40:[2,21],43:[2,21],44:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],53:[2,21],54:[2,21],55:[2,21],56:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],64:[2,21],65:[2,21],66:[2,21]},{8:[2,46],10:[2,46],15:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],22:[2,46],40:[2,46],43:[2,46],44:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46]},{8:[2,34],10:[2,34],15:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],22:[2,34],35:[2,34],37:[2,34],38:[2,34],40:[2,34],43:[2,34],44:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],55:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],65:[2,34],66:[2,34]},{8:[2,35],10:[2,35],15:[2,35],17:[2,35],18:[2,35],19:[2,35],20:[2,35],22:[2,35],35:[2,35],37:[2,35],38:[2,35],40:[2,35],43:[2,35],44:[2,35],47:[2,35],48:[2,35],49:[2,35],50:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35],55:[2,35],56:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],65:[2,35],66:[2,35]},{4:91,10:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],32:90,43:[2,15],47:[2,15],49:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15]},{20:[2,25],22:[2,25],43:[2,25]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,97],23:96,25:95,27:9,33:93,34:94,36:92,42:13,43:[1,24],44:[2,32],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{8:[2,41],10:[2,41],15:[2,41],17:[2,41],18:[2,41],19:[2,41],20:[2,41],22:[2,41],40:[2,41],43:[2,41],44:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[2,41],55:[2,41],56:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41],61:[2,41],62:[2,41],63:[2,41],64:[2,41],65:[2,41],66:[2,41]},{10:[1,19],14:59,16:60,17:[1,20],18:[1,21],19:[1,22],20:[1,26],39:98},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:99,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:100,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{8:[2,44],10:[2,44],15:[2,44],17:[2,44],18:[2,44],19:[2,44],20:[2,44],22:[2,44],40:[2,44],43:[2,44],44:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],51:[2,44],52:[2,44],53:[2,44],54:[2,44],55:[2,44],56:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],64:[2,44],65:[2,44],66:[2,44]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:101,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{44:[1,102]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,97],23:4,25:103,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{44:[1,104]},{8:[1,105]},{8:[2,47],10:[2,47],17:[2,47],18:[2,47],19:[2,47],20:[2,47],22:[2,47],35:[1,106],37:[1,47],38:[1,48],40:[2,47],43:[2,47],47:[2,47],49:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47]},{8:[2,30],40:[1,40],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{8:[2,31]},{8:[2,13],10:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],22:[2,13],24:[1,7],35:[2,13],37:[2,13],38:[2,13],40:[2,13],43:[2,13],44:[2,13],47:[2,13],49:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13]},{15:[2,40],44:[2,40]},{15:[2,37],40:[1,40],44:[2,37],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{15:[2,38],40:[1,40],44:[2,38],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{15:[2,43],40:[1,40],48:[2,43],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{8:[2,50],10:[2,50],15:[2,50],17:[2,50],18:[2,50],19:[2,50],20:[2,50],22:[2,50],40:[2,50],43:[2,50],44:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],51:[2,50],52:[2,50],53:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],65:[2,50],66:[2,50]},{40:[1,40],44:[2,28],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]},{8:[2,51],10:[2,51],15:[2,51],17:[2,51],18:[2,51],19:[2,51],20:[2,51],22:[2,51],40:[2,51],43:[2,51],44:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],51:[2,51],52:[2,51],53:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],65:[2,51],66:[2,51]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,97],23:96,25:95,27:9,33:93,34:94,36:107,42:13,43:[1,24],44:[2,32],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{10:[1,19],14:23,16:10,17:[1,20],18:[1,21],19:[1,22],20:[1,26],25:108,27:9,34:12,42:13,43:[1,24],46:14,47:[1,25],49:[1,11],51:[1,15],52:[1,16],53:[1,17],54:[1,18]},{44:[2,33]},{8:[2,29],40:[1,40],54:[1,28],55:[1,27],56:[1,29],57:[1,30],58:[1,31],59:[1,32],60:[1,33],61:[1,34],62:[1,35],63:[1,36],64:[1,37],65:[1,38],66:[1,39]}],
defaultActions: {3:[2,1],96:[2,31],107:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore single-line comments */
break;
case 1:/* Ignore multi-line comments */
break;
case 2:/* Ignore Whitespace */
break;
case 3:return 51;
break;
case 4:return 52;
break;
case 5:return 11;
break;
case 6:return 9;
break;
case 7:return 13;
break;
case 8:return 18;
break;
case 9:return 19;
break;
case 10:return 43;
break;
case 11:return 44;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 50;
break;
case 16:return 38;
break;
case 17:return 35;
break;
case 18:return 40;
break;
case 19:return 55;
break;
case 20:return 54;
break;
case 21:return 56;
break;
case 22:return 57;
break;
case 23:return 58;
break;
case 24:return 59;
break;
case 25:return 60;
break;
case 26:return 63;
break;
case 27:return 64;
break;
case 28:return 61;
break;
case 29:return 62;
break;
case 30:return 65;
break;
case 31:return 66;
break;
case 32:return 53;
break;
case 33:return 24;
break;
case 34:return 15;
break;
case 35:return 37;
break;
case 36:return 8;
break;
case 37:return 22;
break;
case 38:return 10;
break;
case 39:return 10;
break;
case 40:return 17;
break;
case 41:return 20;
break;
case 42:return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*\\n)/,/^(?:\/\*([^*]|\*[^/])\*\/)/,/^(?:\s+)/,/^(?:fn\b)/,/^(?:do\b)/,/^(?:import\b)/,/^(?:from\b)/,/^(?:as\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:::)/,/^(?:<-)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:_\b)/,/^(?:"(\\"|[^"])*")/,/^(?:'(\\'|[^'])*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}