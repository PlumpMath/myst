/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"imports":4,"declarations":5,"EOF":6,"import":7,";":8,"FROM":9,"string":10,"IMPORT":11,"import_names":12,"AS":13,"identifier":14,",":15,"STRING":16,"number":17,"NUMBER":18,"boolean":19,"TRUE":20,"FALSE":21,"literal":22,"IDENTIFIER":23,"placeholder":24,"_":25,"declaration":26,"=":27,"expression":28,"match":29,"match_list":30,"optional_match_list":31,"function_body":32,"function":33,"FUNCTION":34,"{":35,"}":36,"do_body_item":37,"<-":38,"do_body":39,"do":40,"DO":41,"prim_expression":42,"member":43,".":44,"obj_property":45,":":46,"obj_properties":47,"obj_literal":48,"array_items":49,"array_literal":50,"[":51,"]":52,"argument":53,"argument_list":54,"invocation":55,"(":56,")":57,"!":58,"-":59,"+":60,"*":61,"/":62,"%":63,"==":64,"!=":65,"<":66,">":67,"<=":68,">=":69,"||":70,"&&":71,">>":72,"<<":73,"|>":74,"<|":75,"&!":76,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:";",9:"FROM",11:"IMPORT",13:"AS",15:",",16:"STRING",18:"NUMBER",20:"TRUE",21:"FALSE",23:"IDENTIFIER",25:"_",27:"=",34:"FUNCTION",35:"{",36:"}",38:"<-",41:"DO",44:".",46:":",51:"[",52:"]",56:"(",57:")",58:"!",59:"-",60:"+",61:"*",62:"/",63:"%",64:"==",65:"!=",66:"<",67:">",68:"<=",69:">=",70:"||",71:"&&",72:">>",73:"<<",74:"|>",75:"<|",76:"&!"},
productions_: [0,[3,3],[4,0],[4,3],[7,4],[7,6],[7,4],[12,1],[12,3],[10,1],[17,1],[19,1],[19,1],[22,1],[22,1],[22,1],[14,1],[24,1],[5,0],[5,3],[26,3],[29,1],[29,1],[30,1],[30,2],[31,0],[31,1],[32,2],[33,5],[37,3],[37,1],[37,1],[39,0],[39,3],[40,6],[43,3],[43,1],[45,3],[45,3],[47,1],[47,3],[48,3],[49,1],[49,3],[50,3],[53,1],[53,1],[54,1],[54,2],[55,2],[42,1],[42,3],[42,1],[42,1],[42,1],[42,1],[42,1],[42,2],[28,1],[28,1],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'Program', declarations: $$[$0-1], imports: $$[$0-2], loc: this._$}; 
break;
case 2: this.$ = []; 
break;
case 3: this.$ = $$[$0-2].slice(); this.$.push($$[$0-1]); 
break;
case 4: this.$ = {type: 'Import', names: $$[$0], target: $$[$0-2], as: null, loc: this._$}; 
break;
case 5: this.$ = {type: 'Import', names: $$[$0-2], target: $$[$0-4], as: $$[$0], loc: this._$}; 
break;
case 6: this.$ = {type: 'Import', names: [], target: $$[$0-2], as: $$[$0], loc: this._$}; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 8: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 9: this.$ = {type: 'Literal', value: eval($$[$0]), loc: this._$}; 
break;
case 10: this.$ = {type: 'Literal', value: eval($$[$0]), loc: this._$}; 
break;
case 11: this.$ = {type: 'Literal', value: true, loc: this._$}; 
break;
case 12: this.$ = {type: 'Literal', value: false, loc: this._$}; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = {type: 'Identifier', name: $$[$0], loc: this._$}; 
break;
case 17: this.$ = {type: 'Placeholder', loc: this._$}; 
break;
case 18: this.$ = []; 
break;
case 19: this.$ = $$[$0-2].slice(); this.$.push($$[$0-1]); 
break;
case 20: this.$ = {type: 'Declaration', name: $$[$0-2], value: $$[$0], loc: this._$}; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = [$$[$0]]; 
break;
case 24: this.$ = $$[$0-1].slice(); this.$.push($$[$0]); 
break;
case 25: this.$ = []; 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = {type: 'FunctionBody', returns: $$[$0], declarations: $$[$0-1], loc: this._$}; 
break;
case 28: this.$ = {type: 'Function', params: $$[$0-3], body: $$[$0-1], loc: this._$}; 
break;
case 29: this.$ = {type: 'Bind', target: $$[$0-2], value: $$[$0], loc: this._$}; 
break;
case 30: this.$ = {type: 'Action', value: $$[$0], loc: this._$}; 
break;
case 31: this.$ = $$[$0]; 
break;
case 32: this.$ = []; 
break;
case 33: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 34: this.$ = {type: 'Do', monad: $$[$0-4], params: $$[$0-3], body: $$[$0-1], loc: this._$}; 
break;
case 35: this.$ = {type: 'Member', object: $$[$0-2], property: $$[$0], loc: this._$}; 
break;
case 36: this.$ = $$[$0]; 
break;
case 37: this.$ = {type: 'Property', key: $$[$0-2], value: $$[$0], loc: this._$}; 
break;
case 38: this.$ = {type: 'Property', key: $$[$0-2], value: $$[$0], loc: this._$}; 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 40: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 41: this.$ = {type: 'Object', properties: $$[$0-1], loc: this._$}; 
break;
case 42: this.$ = [$$[$0]]; 
break;
case 43: this.$ = $$[$0-2].slice(); this.$.push($$[$0]); 
break;
case 44: this.$ = {type: 'Array', elements: $$[$0-1], loc: this._$}; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = [$$[$0]]; 
break;
case 48: this.$ = $$[$0-1].slice(); this.$.push($$[$0]); 
break;
case 49: this.$ = {type: 'Invocation', callee: $$[$0-1], arguments: $$[$0], loc: this._$}; 
break;
case 50: this.$ = $$[$0]; 
break;
case 51: this.$ = $$[$0-1]; 
break;
case 52: this.$ = $$[$0]; 
break;
case 53: this.$ = $$[$0]; 
break;
case 54: this.$ = $$[$0]; 
break;
case 55: this.$ = $$[$0]; 
break;
case 56: this.$ = $$[$0]; 
break;
case 57: this.$ = {type: 'Operator', callee: '_NOT_', arguments: [$$[$0]], loc: this._$}; 
break;
case 58: this.$ = $$[$0]; 
break;
case 59: this.$ = $$[$0]; 
break;
case 60: this.$ = {type: 'Operator', callee: '_NEG_', arguments: [$$[$0]], loc: this._$}; 
break;
case 61: this.$ = {type: 'Operator', callee: '_ADD_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 62: this.$ = {type: 'Operator', callee: '_SUB_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 63: this.$ = {type: 'Operator', callee: '_MULT_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 64: this.$ = {type: 'Operator', callee: '_DIV_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 65: this.$ = {type: 'Operator', callee: '_MOD_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 66: this.$ = {type: 'Operator', callee: '_EQUALS_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 67: this.$ = {type: 'Operator', callee: '_NOT_EQUALS_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 68: this.$ = {type: 'Operator', callee: '_LT_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 69: this.$ = {type: 'Operator', callee: '_GT_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 70: this.$ = {type: 'Operator', callee: '_LT_EQ_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 71: this.$ = {type: 'Operator', callee: '_GT_EQ_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 72: this.$ = {type: 'Operator', callee: '_OR_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 73: this.$ = {type: 'Operator', callee: '_AND_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 74: this.$ = {type: 'Operator', callee: '_FWD_COMPOSE_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 75: this.$ = {type: 'Operator', callee: '_BKWD_COMPOSE_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 76: this.$ = {type: 'Operator', callee: '_FWD_PIPE_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 77: this.$ = {type: 'Operator', callee: '_BKWD_PIPE_', arguments: [$$[$0-2], $$[$0]], loc: this._$}; 
break;
case 78: this.$ = {type: 'Operator', callee: '_UNSAFELY_', arguments: [$$[$0]], loc: this._$}; 
break;
}
},
table: [{3:1,4:2,6:[2,2],9:[2,2],11:[2,2],23:[2,2]},{1:[3]},{5:3,6:[2,18],7:4,9:[1,5],11:[1,6],23:[2,18]},{6:[1,7],23:[1,9],26:8},{8:[1,10]},{10:11,16:[1,12]},{10:13,16:[1,12]},{1:[2,1]},{8:[1,14]},{27:[1,15]},{6:[2,3],9:[2,3],11:[2,3],23:[2,3]},{11:[1,16]},{8:[2,9],11:[2,9],13:[2,9],15:[2,9],16:[2,9],18:[2,9],20:[2,9],21:[2,9],23:[2,9],25:[2,9],34:[2,9],35:[2,9],36:[2,9],41:[2,9],44:[2,9],46:[2,9],51:[2,9],52:[2,9],56:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],64:[2,9],65:[2,9],66:[2,9],67:[2,9],68:[2,9],69:[2,9],70:[2,9],71:[2,9],72:[2,9],73:[2,9],74:[2,9],75:[2,9]},{13:[1,17]},{6:[2,19],16:[2,19],18:[2,19],20:[2,19],21:[2,19],23:[2,19],34:[2,19],35:[2,19],41:[2,19],51:[2,19],56:[2,19],58:[2,19],59:[2,19],76:[2,19]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:18,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{12:43,14:44,23:[1,42]},{14:45,23:[1,42]},{8:[2,20],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,58],10:31,14:34,15:[2,58],16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],24:67,25:[1,68],33:29,34:[1,38],35:[1,35],36:[2,58],40:28,41:[1,37],42:66,43:25,44:[1,64],48:26,50:27,51:[1,36],52:[2,58],53:65,54:63,56:[1,24],57:[2,58],58:[1,30],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],68:[2,58],69:[2,58],70:[2,58],71:[2,58],72:[2,58],73:[2,58],74:[2,58],75:[2,58]},{8:[2,59],15:[2,59],36:[2,59],52:[2,59],57:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],68:[2,59],69:[2,59],70:[2,59],71:[2,59],72:[2,59],73:[2,59],74:[2,59],75:[2,59]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:69,43:25,48:26,50:27,51:[1,36],56:[1,24],58:[1,30]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:70,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{8:[2,50],15:[2,50],16:[2,50],18:[2,50],20:[2,50],21:[2,50],23:[2,50],25:[2,50],34:[2,50],35:[2,50],36:[2,50],41:[2,50],44:[2,50],51:[2,50],52:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50],69:[2,50],70:[2,50],71:[2,50],72:[2,50],73:[2,50],74:[2,50],75:[2,50]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:71,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{8:[2,52],15:[2,52],16:[2,52],18:[2,52],20:[2,52],21:[2,52],23:[2,52],25:[2,52],34:[2,52],35:[2,52],36:[2,52],41:[2,52],44:[2,52],51:[2,52],52:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52]},{8:[2,53],15:[2,53],16:[2,53],18:[2,53],20:[2,53],21:[2,53],23:[2,53],25:[2,53],34:[2,53],35:[2,53],36:[2,53],41:[2,53],44:[2,53],51:[2,53],52:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53]},{8:[2,54],15:[2,54],16:[2,54],18:[2,54],20:[2,54],21:[2,54],23:[2,54],25:[2,54],34:[2,54],35:[2,54],36:[2,54],41:[2,54],44:[2,54],51:[2,54],52:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],69:[2,54],70:[2,54],71:[2,54],72:[2,54],73:[2,54],74:[2,54],75:[2,54]},{8:[2,55],15:[2,55],16:[2,55],18:[2,55],20:[2,55],21:[2,55],23:[2,55],25:[2,55],34:[2,55],35:[2,55],36:[2,55],41:[2,55],44:[2,55],51:[2,55],52:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],69:[2,55],70:[2,55],71:[2,55],72:[2,55],73:[2,55],74:[2,55],75:[2,55]},{8:[2,56],15:[2,56],16:[2,56],18:[2,56],20:[2,56],21:[2,56],23:[2,56],25:[2,56],34:[2,56],35:[2,56],36:[2,56],41:[2,56],44:[2,56],51:[2,56],52:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],69:[2,56],70:[2,56],71:[2,56],72:[2,56],73:[2,56],74:[2,56],75:[2,56]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:72,43:25,48:26,50:27,51:[1,36],56:[1,24],58:[1,30]},{8:[2,13],15:[2,13],16:[2,13],18:[2,13],20:[2,13],21:[2,13],23:[2,13],25:[2,13],34:[2,13],35:[2,13],36:[2,13],41:[2,13],44:[2,13],46:[2,13],51:[2,13],52:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],68:[2,13],69:[2,13],70:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13]},{8:[2,14],15:[2,14],16:[2,14],18:[2,14],20:[2,14],21:[2,14],23:[2,14],25:[2,14],34:[2,14],35:[2,14],36:[2,14],41:[2,14],44:[2,14],46:[2,14],51:[2,14],52:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],65:[2,14],66:[2,14],67:[2,14],68:[2,14],69:[2,14],70:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14]},{8:[2,15],15:[2,15],16:[2,15],18:[2,15],20:[2,15],21:[2,15],23:[2,15],25:[2,15],34:[2,15],35:[2,15],36:[2,15],41:[2,15],44:[2,15],46:[2,15],51:[2,15],52:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],64:[2,15],65:[2,15],66:[2,15],67:[2,15],68:[2,15],69:[2,15],70:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15]},{8:[2,36],15:[2,36],16:[2,36],18:[2,36],20:[2,36],21:[2,36],23:[2,36],25:[2,36],34:[2,36],35:[2,36],36:[2,36],41:[2,36],44:[2,36],51:[2,36],52:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],65:[2,36],66:[2,36],67:[2,36],68:[2,36],69:[2,36],70:[2,36],71:[2,36],72:[2,36],73:[2,36],74:[2,36],75:[2,36]},{10:31,14:75,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:76,23:[1,42],45:74,47:73},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:78,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,49:77,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:79,43:25,48:26,50:27,51:[1,36],56:[1,24],58:[1,30]},{14:82,23:[1,42],24:83,25:[1,68],29:81,30:80},{8:[2,10],15:[2,10],16:[2,10],18:[2,10],20:[2,10],21:[2,10],23:[2,10],25:[2,10],34:[2,10],35:[2,10],36:[2,10],41:[2,10],44:[2,10],46:[2,10],51:[2,10],52:[2,10],56:[2,10],57:[2,10],58:[2,10],59:[2,10],60:[2,10],61:[2,10],62:[2,10],63:[2,10],64:[2,10],65:[2,10],66:[2,10],67:[2,10],68:[2,10],69:[2,10],70:[2,10],71:[2,10],72:[2,10],73:[2,10],74:[2,10],75:[2,10]},{8:[2,11],15:[2,11],16:[2,11],18:[2,11],20:[2,11],21:[2,11],23:[2,11],25:[2,11],34:[2,11],35:[2,11],36:[2,11],41:[2,11],44:[2,11],46:[2,11],51:[2,11],52:[2,11],56:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11],63:[2,11],64:[2,11],65:[2,11],66:[2,11],67:[2,11],68:[2,11],69:[2,11],70:[2,11],71:[2,11],72:[2,11],73:[2,11],74:[2,11],75:[2,11]},{8:[2,12],15:[2,12],16:[2,12],18:[2,12],20:[2,12],21:[2,12],23:[2,12],25:[2,12],34:[2,12],35:[2,12],36:[2,12],41:[2,12],44:[2,12],46:[2,12],51:[2,12],52:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],64:[2,12],65:[2,12],66:[2,12],67:[2,12],68:[2,12],69:[2,12],70:[2,12],71:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12]},{8:[2,16],13:[2,16],15:[2,16],16:[2,16],18:[2,16],20:[2,16],21:[2,16],23:[2,16],25:[2,16],34:[2,16],35:[2,16],36:[2,16],41:[2,16],44:[2,16],46:[2,16],51:[2,16],52:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],64:[2,16],65:[2,16],66:[2,16],67:[2,16],68:[2,16],69:[2,16],70:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16]},{8:[2,4],13:[1,84],15:[1,85]},{8:[2,7],13:[2,7],15:[2,7]},{8:[2,6]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:86,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:87,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:88,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:89,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:90,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:91,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:92,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:93,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:94,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:95,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:96,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:97,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:98,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:99,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:100,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:101,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:102,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{8:[2,49],10:31,14:34,15:[2,49],16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],24:67,25:[1,68],33:29,34:[1,38],35:[1,35],36:[2,49],40:28,41:[1,37],42:66,43:25,48:26,50:27,51:[1,36],52:[2,49],53:103,56:[1,24],57:[2,49],58:[1,30],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[2,49],69:[2,49],70:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49],75:[2,49]},{14:104,23:[1,42]},{8:[2,47],15:[2,47],16:[2,47],18:[2,47],20:[2,47],21:[2,47],23:[2,47],25:[2,47],34:[2,47],35:[2,47],36:[2,47],41:[2,47],51:[2,47],52:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47],69:[2,47],70:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47]},{8:[2,45],15:[2,45],16:[2,45],18:[2,45],20:[2,45],21:[2,45],23:[2,45],25:[2,45],34:[2,45],35:[2,45],36:[2,45],41:[2,45],44:[1,64],51:[2,45],52:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45],65:[2,45],66:[2,45],67:[2,45],68:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45]},{8:[2,46],15:[2,46],16:[2,46],18:[2,46],20:[2,46],21:[2,46],23:[2,46],25:[2,46],34:[2,46],35:[2,46],36:[2,46],41:[2,46],51:[2,46],52:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],68:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46]},{8:[2,17],15:[2,17],16:[2,17],18:[2,17],20:[2,17],21:[2,17],23:[2,17],25:[2,17],34:[2,17],35:[2,17],36:[2,17],41:[2,17],51:[2,17],52:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],65:[2,17],66:[2,17],67:[2,17],68:[2,17],69:[2,17],70:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17]},{8:[2,60],15:[2,60],36:[2,60],44:[1,64],52:[2,60],57:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60],69:[2,60],70:[2,60],71:[2,60],72:[2,60],73:[2,60],74:[2,60],75:[2,60]},{8:[2,78],15:[2,78],36:[2,78],52:[2,78],57:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],65:[2,78],66:[2,78],67:[2,78],68:[2,78],69:[2,78],70:[2,78],71:[2,78],72:[2,78],73:[2,78],74:[2,78],75:[2,78]},{57:[1,105],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,57],15:[2,57],16:[2,57],18:[2,57],20:[2,57],21:[2,57],23:[2,57],25:[2,57],34:[2,57],35:[2,57],36:[2,57],41:[2,57],44:[1,64],51:[2,57],52:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],69:[2,57],70:[2,57],71:[2,57],72:[2,57],73:[2,57],74:[2,57],75:[2,57]},{15:[1,107],36:[1,106]},{15:[2,39],36:[2,39]},{46:[1,108]},{46:[1,109]},{15:[1,111],52:[1,110]},{15:[2,42],52:[2,42],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{14:82,23:[1,42],24:83,25:[1,68],29:81,30:113,31:112,35:[2,25],44:[1,64]},{14:82,23:[1,42],24:83,25:[1,68],29:115,35:[1,114]},{23:[2,23],25:[2,23],35:[2,23]},{23:[2,21],25:[2,21],35:[2,21]},{23:[2,22],25:[2,22],35:[2,22]},{14:116,23:[1,42]},{14:117,23:[1,42]},{8:[2,61],15:[2,61],36:[2,61],52:[2,61],57:[2,61],59:[2,61],60:[2,61],61:[1,48],62:[1,49],63:[1,50],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[2,61],69:[2,61],70:[2,61],71:[2,61],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,62],15:[2,62],36:[2,62],52:[2,62],57:[2,62],59:[2,62],60:[2,62],61:[1,48],62:[1,49],63:[1,50],64:[2,62],65:[2,62],66:[2,62],67:[2,62],68:[2,62],69:[2,62],70:[2,62],71:[2,62],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,63],15:[2,63],36:[2,63],52:[2,63],57:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],65:[2,63],66:[2,63],67:[2,63],68:[2,63],69:[2,63],70:[2,63],71:[2,63],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,64],15:[2,64],36:[2,64],52:[2,64],57:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],65:[2,64],66:[2,64],67:[2,64],68:[2,64],69:[2,64],70:[2,64],71:[2,64],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,65],15:[2,65],36:[2,65],52:[2,65],57:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],65:[2,65],66:[2,65],67:[2,65],68:[2,65],69:[2,65],70:[2,65],71:[2,65],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,66],15:[2,66],36:[2,66],52:[2,66],57:[2,66],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],70:[2,66],71:[2,66],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,67],15:[2,67],36:[2,67],52:[2,67],57:[2,67],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],70:[2,67],71:[2,67],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,68],15:[2,68],36:[2,68],52:[2,68],57:[2,68],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],70:[2,68],71:[2,68],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,69],15:[2,69],36:[2,69],52:[2,69],57:[2,69],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],70:[2,69],71:[2,69],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,70],15:[2,70],36:[2,70],52:[2,70],57:[2,70],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],70:[2,70],71:[2,70],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,71],15:[2,71],36:[2,71],52:[2,71],57:[2,71],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],70:[2,71],71:[2,71],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,72],15:[2,72],36:[2,72],52:[2,72],57:[2,72],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,73],15:[2,73],36:[2,73],52:[2,73],57:[2,73],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[2,73],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,74],15:[2,74],36:[2,74],52:[2,74],57:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],67:[2,74],68:[2,74],69:[2,74],70:[2,74],71:[2,74],72:[2,74],73:[1,60],74:[2,74],75:[1,62]},{8:[2,75],15:[2,75],36:[2,75],52:[2,75],57:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],65:[2,75],66:[2,75],67:[2,75],68:[2,75],69:[2,75],70:[2,75],71:[2,75],72:[2,75],73:[1,60],74:[2,75],75:[1,62]},{8:[2,76],15:[2,76],36:[2,76],52:[2,76],57:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[2,76],66:[2,76],67:[2,76],68:[2,76],69:[2,76],70:[2,76],71:[2,76],72:[2,76],73:[1,60],74:[2,76],75:[1,62]},{8:[2,77],15:[2,77],36:[2,77],52:[2,77],57:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[2,77],66:[2,77],67:[2,77],68:[2,77],69:[2,77],70:[2,77],71:[2,77],72:[2,77],73:[1,60],74:[2,77],75:[1,62]},{8:[2,48],15:[2,48],16:[2,48],18:[2,48],20:[2,48],21:[2,48],23:[2,48],25:[2,48],34:[2,48],35:[2,48],36:[2,48],41:[2,48],51:[2,48],52:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48],69:[2,48],70:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48],75:[2,48]},{8:[2,35],15:[2,35],16:[2,35],18:[2,35],20:[2,35],21:[2,35],23:[2,35],25:[2,35],34:[2,35],35:[2,35],36:[2,35],41:[2,35],44:[2,35],51:[2,35],52:[2,35],56:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],65:[2,35],66:[2,35],67:[2,35],68:[2,35],69:[2,35],70:[2,35],71:[2,35],72:[2,35],73:[2,35],74:[2,35],75:[2,35]},{8:[2,51],15:[2,51],16:[2,51],18:[2,51],20:[2,51],21:[2,51],23:[2,51],25:[2,51],34:[2,51],35:[2,51],36:[2,51],41:[2,51],44:[2,51],51:[2,51],52:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51],69:[2,51],70:[2,51],71:[2,51],72:[2,51],73:[2,51],74:[2,51],75:[2,51]},{8:[2,41],15:[2,41],16:[2,41],18:[2,41],20:[2,41],21:[2,41],23:[2,41],25:[2,41],34:[2,41],35:[2,41],36:[2,41],41:[2,41],44:[2,41],51:[2,41],52:[2,41],56:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41],61:[2,41],62:[2,41],63:[2,41],64:[2,41],65:[2,41],66:[2,41],67:[2,41],68:[2,41],69:[2,41],70:[2,41],71:[2,41],72:[2,41],73:[2,41],74:[2,41],75:[2,41]},{10:31,14:75,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:76,23:[1,42],45:118},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:119,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:120,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{8:[2,44],15:[2,44],16:[2,44],18:[2,44],20:[2,44],21:[2,44],23:[2,44],25:[2,44],34:[2,44],35:[2,44],36:[2,44],41:[2,44],44:[2,44],51:[2,44],52:[2,44],56:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],64:[2,44],65:[2,44],66:[2,44],67:[2,44],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:121,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{35:[1,122]},{14:82,23:[1,42],24:83,25:[1,68],29:115,35:[2,26]},{5:124,16:[2,18],18:[2,18],20:[2,18],21:[2,18],23:[2,18],32:123,34:[2,18],35:[2,18],41:[2,18],51:[2,18],56:[2,18],58:[2,18],59:[2,18],76:[2,18]},{23:[2,24],25:[2,24],35:[2,24]},{8:[2,5]},{8:[2,8],13:[2,8],15:[2,8]},{15:[2,40],36:[2,40]},{15:[2,37],36:[2,37],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{15:[2,38],36:[2,38],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{15:[2,43],52:[2,43],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{10:31,14:127,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,130],26:129,28:128,33:29,34:[1,38],35:[1,35],36:[2,32],37:126,39:125,40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{36:[1,131]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,130],26:8,28:132,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{36:[1,133]},{8:[1,134]},{8:[2,36],16:[2,36],18:[2,36],20:[2,36],21:[2,36],23:[2,36],25:[2,36],34:[2,36],35:[2,36],38:[1,135],41:[2,36],44:[2,36],51:[2,36],56:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],65:[2,36],66:[2,36],67:[2,36],68:[2,36],69:[2,36],70:[2,36],71:[2,36],72:[2,36],73:[2,36],74:[2,36],75:[2,36]},{8:[2,30],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,31]},{8:[2,16],16:[2,16],18:[2,16],20:[2,16],21:[2,16],23:[2,16],25:[2,16],27:[1,15],34:[2,16],35:[2,16],36:[2,16],38:[2,16],41:[2,16],44:[2,16],51:[2,16],56:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],64:[2,16],65:[2,16],66:[2,16],67:[2,16],68:[2,16],69:[2,16],70:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16]},{8:[2,28],15:[2,28],16:[2,28],18:[2,28],20:[2,28],21:[2,28],23:[2,28],25:[2,28],34:[2,28],35:[2,28],36:[2,28],41:[2,28],44:[2,28],51:[2,28],52:[2,28],56:[2,28],57:[2,28],58:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28]},{36:[2,27],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]},{8:[2,34],15:[2,34],16:[2,34],18:[2,34],20:[2,34],21:[2,34],23:[2,34],25:[2,34],34:[2,34],35:[2,34],36:[2,34],41:[2,34],44:[2,34],51:[2,34],52:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],65:[2,34],66:[2,34],67:[2,34],68:[2,34],69:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34]},{10:31,14:127,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,130],26:129,28:128,33:29,34:[1,38],35:[1,35],36:[2,32],37:126,39:136,40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{10:31,14:34,16:[1,12],17:32,18:[1,39],19:33,20:[1,40],21:[1,41],22:23,23:[1,42],28:137,33:29,34:[1,38],35:[1,35],40:28,41:[1,37],42:19,43:25,48:26,50:27,51:[1,36],55:20,56:[1,24],58:[1,30],59:[1,21],76:[1,22]},{36:[2,33]},{8:[2,29],59:[1,47],60:[1,46],61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52],66:[1,53],67:[1,54],68:[1,55],69:[1,56],70:[1,57],71:[1,58],72:[1,59],73:[1,60],74:[1,61],75:[1,62]}],
defaultActions: {7:[2,1],45:[2,6],116:[2,5],129:[2,31],136:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore single-line comments */
break;
case 1:/* Ignore multi-line comments */
break;
case 2:/* Ignore Whitespace */
break;
case 3:return 34;
break;
case 4:return 41;
break;
case 5:return 11;
break;
case 6:return 9;
break;
case 7:return 13;
break;
case 8:return 20;
break;
case 9:return 21;
break;
case 10:return 35;
break;
case 11:return 36;
break;
case 12:return 51;
break;
case 13:return 52;
break;
case 14:return 56;
break;
case 15:return 57;
break;
case 16:return 38;
break;
case 17:return '++';
break;
case 18:return 60;
break;
case 19:return 59;
break;
case 20:return 61;
break;
case 21:return 62;
break;
case 22:return 63;
break;
case 23:return 72;
break;
case 24:return 73;
break;
case 25:return 74;
break;
case 26:return 75;
break;
case 27:return 64;
break;
case 28:return 65;
break;
case 29:return 68;
break;
case 30:return 69;
break;
case 31:return 66;
break;
case 32:return 67;
break;
case 33:return 70;
break;
case 34:return 71;
break;
case 35:return 76;
break;
case 36:return 58;
break;
case 37:return 27;
break;
case 38:return 46;
break;
case 39:return 15;
break;
case 40:return 44;
break;
case 41:return 8;
break;
case 42:return 25;
break;
case 43:return 16;
break;
case 44:return 16;
break;
case 45:return 18;
break;
case 46:return 23;
break;
case 47:return 6;
break;
}
},
rules: [/^(?:\/\/[^\n]*\\n)/,/^(?:\/\*([^*]|\*[^/])\*\/)/,/^(?:\s+)/,/^(?:fn\b)/,/^(?:do\b)/,/^(?:import\b)/,/^(?:from\b)/,/^(?:as\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:<-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>>)/,/^(?:<<)/,/^(?:\|>)/,/^(?:<\|)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&!)/,/^(?:!)/,/^(?:=)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?:_\b)/,/^(?:"(\\"|[^"])*")/,/^(?:'(\\'|[^'])*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[$a-zA-Z_][$a-zA-Z0-9_]*\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}