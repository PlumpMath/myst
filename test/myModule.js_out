(function () {
    var __6 = require('myst/runtime'), IO = __6.IO, Thunk = __6.Thunk, Pure = __6.Pure, Weak = __6.Weak, Numeric = __6.Numeric, call = __6.call, force = __6.force, forceJS = __6.forceJS, MystObj = __6.MystObj, doIO = __6.doIO;
    var trace = Thunk(function () {
            return Pure(function (m, y) {
                return call(unsafePerformIO, call(call(get, IO, 'bind'), call(call(get, console, 'log'), m, y), Pure(function (__1) {
                    return call(call(get, IO, 'return'), y);
                })));
            });
        }), fact = Thunk(function () {
            return Pure(function (x) {
                return call(_IF_, call(_LT_EQ_, x, 0), 1, call(_MULT_, x, call(fact, call(_SUB_, x, 1))));
            });
        }), test1 = Thunk(function () {
            return call(obj, 'Hello', 'There!', 'Whats', call(_ADD_, 9, 9));
        }), test2 = Thunk(function () {
            return call(arr, 'Hello', 'Again', call(_ADD_, call(_ADD_, 9, 3), 8));
        }), main = Thunk(function () {
            return call(call(get, IO, 'bind'), call(call(get, console, 'log'), test1), Pure(function (__2) {
                return call(call(get, IO, 'bind'), call(call(get, console, 'log'), test2), Pure(function (__3) {
                    return call(call(get, IO, 'bind'), call(call(get, console, 'log'), 'Hello World!'), Pure(function (__4) {
                        return call(call(get, IO, 'bind'), call(call(get, console, 'log'), 'This is a pretty cool place!'), Pure(function (__5) {
                            return call(call(get, console, 'log'), call(fact, 6));
                        }));
                    }));
                }));
            }));
        });
    module.exports = {
        trace: trace,
        fact: fact,
        test1: test1,
        test2: test2,
        main: main
    };
    var __0 = require('myst/prelude'), get = __0.get, unsafePerformIO = __0.unsafePerformIO, obj = __0.obj, arr = __0.arr, _IF_ = __0._IF_, _ADD_ = __0._ADD_, _SUB_ = __0._SUB_, _MULT_ = __0._MULT_, _DIV_ = __0._DIV_, _MOD_ = __0._MOD_, _EQUALS_ = __0._EQUALS_, _NOT_EQUALS_ = __0._NOT_EQUALS_, _LT_ = __0._LT_, _GT_ = __0._GT_, _LT_EQ_ = __0._LT_EQ_, _GT_EQ_ = __0._GT_EQ_, _OR_ = __0._OR_, _AND_ = __0._AND_, _NOT_ = __0._NOT_;
}());