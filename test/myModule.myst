-- Comment
let x = 10
let fact x = xol * fact (x - 1)

let getS {s:x, p:[a, b]} =
      x |> map (fn x -> y) %
        |> join '...' %

let transform y =
      y |> map (fn x -> y) %
        |> join ' ' %
        |> drop 3 %
        |> console.log %

let f x =
    let y = 10
    return 20

let a = {x:"alpha", y:"zeta"}

-------------------
-- Lexer results --
-------------------
-- {
-- LET IDENTIFIER = {NUMBER} ;
-- LET IDENTIFIER IDENTIFIER = {IDENTIFIER * IDENTIFIER (IDENTIFIER - NUMBER)} ;
-- LET IDENTIFIER {IDENTIFIER : IDENTIFIER , IDENTIFIER : [IDENTIFIER , IDENTIFIER]} = {
--     IDENTIFIER |> IDENTIFIER (FN IDENTIFIER -> IDENTIFIER) %
--                |> IDENTIFIER STRING %
-- } ;
-- LET IDENTIFIER IDENTIFIER = {
--     IDENTIFIER |> IDENTIFIER (FN IDENTIFIER -> IDENTIFIER) %
--                |> IDENTIFIER STRING %
--                |> IDENTIFIER NUMBER %
--                |> IDENTIFIER . IDENTIFIER %
-- } ;
-- LET IDENTIFIER IDENTIFIER = {
--     LET IDENTIFIER = {NUMBER} ;
--     IDENTIFIER NUMBER
-- } ;
-- LET IDENTIFIER = {{IDENTIFIER : STRING , IDENTIFIER : STRING}}
-- }
-- EOF
