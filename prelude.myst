-- prelude.myst - The built-in functions for Myst

-- declare Object, Array
import './runtime' as rt
import 'immutable' as imm

-- Arithmetic Functions
let add = rt.add       -- +
let sub = rt.sub       -- -
let mul = rt.mul       -- *
let div = rt.div       -- /
let concat = rt.concat -- ++

let neg x = 0 - x -- TODO: Make this much faster

let inc x = x + 1
let dec x = x - 1

-- Binary Functions
let binAnd = rt.binAnd
let binOr = rt.binOr
let binNot = rt.binNot

-- Logical Functions
let eq = rt.eq   -- ==
let neq = rt.neq -- !=
let lte = rt.lte -- <=
let gte = rt.gte -- >=
let lt = rt.lt   -- <
let gt = rt.gt   -- >

-- The merge operator
let merge = rt.merge -- #

-- Mapping
let map f x = (imm.Sequence:from x):map f
let filter f x = (imm.Sequence:from x):filter (f >> rt.truth)
let fold f z x = (imm.Sequence:from x):reduce f z
let length x = (imm.Sequence:from x).length
let isList x = Array.isArray x || instanceOf x imm.Sequence

-- Object Types
let Map = imm.Map!
let Vec = imm.Vector!
let Set = imm.Set!
let Obj = Object!
let Arr = Array!

let show = rt.show
let get o p =
    let np = if p < 0 then length o + p else p
    rt.get o np

-- Memoize
let memoize f =
    let memo = Obj#{}
    fn x ->  -- TODO: Implement once we get globs in lambdas
       if memo:hasOwnProperty x
       then getProperty memo x
       else let res = f x
            set memo x res
            res

let instanceOf = rt.instanceOf
let slice x f t = (imm.Sequence:from x):slice f t

-- Range
let range = imm.Range

let error = rt.error
