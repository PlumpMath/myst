-- prelude.myst - The built-in functions for Myst

-- declare Object, Array
import './runtime' as rt
import 'immutable' as imm

-- Arithmetic Functions
let add = rt.add       -- +
let sub = rt.sub       -- -
let mul = rt.mul       -- *
let div = rt.div       -- /
let concat = rt.concat -- ++

let inc x = x + 1
let dec x = x - 1

-- Binary Functions
let binAnd = rt.binAnd
let binOr = rt.binOr
let binNot = rt.binNot

-- Logical Functions
let eq = rt.eq   -- ==
let neq = rt.neq -- !=
let lte = rt.lte -- <=
let gte = rt.gte -- >=
let lt = rt.lt   -- <
let gt = rt.gt   -- >

-- Mapping
let map f x = (imm.Sequence:from x):map f
let filter f x = (imm.Sequence:from x):filter (f >> rt.truth)
let fold f z x = (imm.Sequence:from x):reduce f z

-- Object Types
let Map = imm.Map!
let Vec = imm.Vector!
let Set = imm.Set!
let Obj = Object!
let Arr = Array!

-- Memoize
let memoize f =
    let memo = Obj#{a: 'b'}
    fn x ->
       if memo:hasOwnProperty x
          then getProperty memo x
          else let res = f x
               set memo x res
               res

-- Range
let range = imm.Range
